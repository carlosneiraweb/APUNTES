////////////HELP///////////
git help <verb>
git <verb> --help
man git -<verb>


git clone -o server https://github.com/carlosneiraweb/git.git => Cambia nombre rama remota

git commit -a -m 'La \a\ nos evita tener que añadir con \add\ los archivos y las modificaciones
use "git reset HEAD <file>..." to unstage => saca del stage

gitk =>visor grafico

gitk =>programa grafico
git remote -v =>MUestra listado de repositorios remotos


		/////PUSH//////

git push origin master



		///////MV///////

git mv README.md README => Renombrar archivos


///////////////////////ADD/////////////////////
Añade nuevos archivos
Prepara los archivos con cambios


/////////////ELIMINAR ARCHIVOS/////////

git rm -f GIT/public_html/eliminar.html => ARCHIVOS QUE YA ESTEN EN EL STAGE, TAMBIEN LO ELIMINA DEL AREA DE TRABAJO
git restore --staged archivo => saca del stage pero deja el archivo en el area de trabajo
git restore p => Si hemos eliminado del area de trabajo un archivo pero lo tenemos en el Stage podemos devolverlo al area de trabajo
git mv archivo archivo.txt => renombra en el stage y area de trabajo



Directorio de trabajo => Indice del entorno de ensayo(add) => Historial de confirmaciones

	git status muestra los cambios entre el historial  de confirmaciones y el indice del entorno de ensayo(add)(letras verdes)
	git status muestra los cambios en el directorio de trabajo(letras rojas)
	git ls-files -s =>Comprueba el estado del entorno de ensayo(letras verdes)



//////////////DIFF///////////
git diff => Muestra los cambios que se hacen a un archivo que estaba en el area del Staged y se ha modificado
Muestra los cambios que no estan aun preparados 'no se ha usado el comando add'
git diff --staged => muestra los cambios que iran en el proximo commit


////////////CHECKOUT//////////////
git chekout comandos.txt => deshace los cambios hechos en el archivo, lo devuelvo al ultimo commit


///REPOSITORIO REMOTO///

origin => repositorio remoto original
main  => rama principal 'antiguamente llamada master antes de 2020'
git remote -v => Muestra informacion del remoto
1) git remote show origin => informacion rama remota. Tambien nos dice si nuestro directorio 
                            esta actualizado 'up to date' o alguien a modificado el remoto 'local out date'
git branch -r => Para saber las ramas con las que trabaja nuestro repositorio
2)git fetch => Nos descarga la modificaciones que hayan sido hechas en el remoto
             Pero no las añade a nuestro  directorio local
3)git checkout o git checkout FETCH_HEAD => NOs indica los cambios realizados en el remoto
git log origin/main => Nos da mas informacion
4)git merge origin/main => Hacemos un merge de nuestro repositorio local con el remoto
                        git fetch/merge = git pull

    




                ////tag//// 

git tab crea una rama del proyecto por ejemplo v01
Existen las anotadas o las ligeras
git tag =>lista de etiquetas
git tag --delete 'nombre etiqueta'
git tag -a v1 -m 'anotada'=>copia del proyecto
git tag v1 -lw ligera =>no lleva anotacion
git show v1.5 => Muestra informacion de la etiqueta
Tambien se pueden hacer etiquetas de anteriores commits
git log --pretty=oneline
git tag -a v1.2 'numero del commit'
git push origin v1.5 =>SUbe etiqueta
git push origin --tags => Sube varias etiquetas




        ///GIT LOG///
git status muestra el estado del repositorio

git log => muestra todos los commits
git log --oneline
git log --graph =>Muestra un grafico con las ramas y las uniones
git log --branches=* => Muestra los commits de todas la ramas



       			// MOVERSE POR LOS COMMITS //
git log --oneline => Muestra los commits 
git checkout 'numero del commit' nos mueve al commit señalado
git reflog =>Muestra todos los cambios del HEAD a los commits
	
	
					////CHECKOUT////

git checkout 949ffa3 => NOS MUEVE A ESE COMMIT 'OJO' Te encuentras en estado 'detached HEAD'
git ch 396aa53 -- segundo.txt => Devuelve el archivo al estado del commit
				Luego add* y un nuevo commit

git checkout main =>Nos mueve al principio del proyecto
 git ch -f hola.txt => Devuelve el archivo al estado anterior "OJO solo en el area de trabajo NO EN EL STAGE", 
			pero se debe haber hecho un ""add*""  sobre el archivo.
			Para sacarlo del stage se puede usar git reset HEAD archivo.txt
			Si se ha hecho un commit se puede devolver al stage con git reset --soft HEAD~1
		       Se puede sacar el archivo del Stage con git restore --staged <archivo> y luego aplicar el checkout -f



				/////GIT RESET //////
				
https://www.atlassian.com/es/git/tutorials/undoing-changes/git-reset				
				
	git ls-remote => indica ultimo commit del remoto
	git log --remotes
1º Si no hemos subido los cambios al repositorio remoto
	
	
	git reset nombre archivo =>  Saca el archivo del stage
	
	(Nos devuelve al estado anterior en los tres arboles, no es necesario haber echo un commit)
    	git reset --hard HEAD~1
	git reset --hard d4e428e =>Nos mueve al commit señalado. OJO elimina commits posteriores, datos del stage y area de trabajo

	//Funcionamiento predeterminado
	git reset --mixed => Elimina las modificaciones del stage 
			
			
			
			***************************REVISAR***********************
	git reset --mixed HEAD~1 => Elimina del stage pasandolo al area de trabajo y elimina commit señalado.
			            Los commits por encima del seleccionado vuelven al area de trabajo.
			            Son sacados del stage
				    OJO => En el area de trabajo las modificaciones siguen estando
				    Para que se queden como antes del 'add' hay que utilizar checkout + archivo o borrar los nuevos archivos

	git reset --soft HEAD~1 => Elimina el ultimo commit dejando el stage y el area de trabajo como estaban antes de hacer el commit
			           Saca el ultimo commit y lo deja en el stage
        git reset --soft 3ea22b3


2ºSi hemos hecho push

    git revert HEAD => Desace el anterior commit si hacemos 'git log --oneline' seguira apareciendo los commits saltados
    git revert	HEAD 320cd613df19acb496920a27ffe2e6474ca4a0d2




			

			//////REVERT/////

                            


                                ///RAMAS////
git branch // git branch -a => Listado de ramas
git branch -v => Nos dice los ultimos commits en las distintas ramas
git branch --merge|--no-merge => Nos muestra las ramas fusionadas o no fusionadas todavia
git branch 'nueva rama' =>crea nueva rama pero no nos mueve a ella
git checkout 'nueva rama' => Nos mueve a la nueva rama
git checkout -b 'nueva rama' =>Crea y nos mueve a la nueva rama
	
git branch -d 'nueva rama ' =>Elimina la rama en local !! OJO DESDE MAIN !!
git push origin 'nueva rama' => para subir remoto

git branch origin --delete 'nueva rama' || git push origin --delete nueva_rama =>Elimina rama en remoto !! OJO DESDE MAIN !!

git fetch origin => Mueve el HEAD de mi repositorio local al HEAD del origin(github) en caso de que se halla hecho push


				///MERGE 
https://git-scm.com/book/es/v2/Ramificaciones-en-Git-Procedimientos-B%C3%A1sicos-para-Ramificar-y-Fusionar

//Antes de hacer un merge hay que volver a la ramam main
git merge  =>Hace merge desde MAIN a la rama señalada !! OJO DESDE MAIN !!
git branch -d  =>Eliminamos la rama
git mergetool --tool = "nombre de la herramienta"
hacer commit desde main



